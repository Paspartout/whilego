// Code generated by "enumer -type=Token"; DO NOT EDIT

package whilego

import (
	"fmt"
)

const _TokenName = "ILLEGALEOFWSVARIABLECONSTANTSEMICOLONASSIGNNOTEQUALPLUSMINUSWHILEDOEND"

var _TokenIndex = [...]uint8{0, 7, 10, 12, 20, 28, 37, 43, 51, 55, 60, 65, 67, 70}

func (i Token) String() string {
	if i < 0 || i >= Token(len(_TokenIndex)-1) {
		return fmt.Sprintf("Token(%d)", i)
	}
	return _TokenName[_TokenIndex[i]:_TokenIndex[i+1]]
}

var _TokenValues = []Token{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}

var _TokenNameToValueMap = map[string]Token{
	_TokenName[0:7]:   0,
	_TokenName[7:10]:  1,
	_TokenName[10:12]: 2,
	_TokenName[12:20]: 3,
	_TokenName[20:28]: 4,
	_TokenName[28:37]: 5,
	_TokenName[37:43]: 6,
	_TokenName[43:51]: 7,
	_TokenName[51:55]: 8,
	_TokenName[55:60]: 9,
	_TokenName[60:65]: 10,
	_TokenName[65:67]: 11,
	_TokenName[67:70]: 12,
}

// TokenString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TokenString(s string) (Token, error) {
	if val, ok := _TokenNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Token values", s)
}

// TokenValues returns all values of the enum
func TokenValues() []Token {
	return _TokenValues
}

// IsAToken returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Token) IsAToken() bool {
	for _, v := range _TokenValues {
		if i == v {
			return true
		}
	}
	return false
}
